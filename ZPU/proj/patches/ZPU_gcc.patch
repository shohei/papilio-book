diff --git a/toolchain/gcc/gcc/c-parse.y b/toolchain/gcc/gcc/c-parse.y
index 3d071bd..a65a029 100755
--- a/toolchain/gcc/gcc/c-parse.y
+++ b/toolchain/gcc/gcc/c-parse.y
@@ -1647,7 +1647,7 @@ enum_head:
 
 structsp_attr:
 	  struct_head identifier '{'
-		{ $$ = start_struct (RECORD_TYPE, $2);
+		{ $<ttype>$ = start_struct (RECORD_TYPE, $2);
 		  /* Start scope of tag before parsing components.  */
 		}
 	  component_decl_list '}' maybe_attribute
@@ -1658,7 +1658,7 @@ structsp_attr:
 				      nreverse ($3), chainon ($1, $5));
 		}
 	| union_head identifier '{'
-		{ $$ = start_struct (UNION_TYPE, $2); }
+		{ $<ttype>$ = start_struct (UNION_TYPE, $2); }
 	  component_decl_list '}' maybe_attribute
 		{ $$ = finish_struct ($<ttype>4, nreverse ($5),
 				      chainon ($1, $7)); }
@@ -1667,12 +1667,12 @@ structsp_attr:
 				      nreverse ($3), chainon ($1, $5));
 		}
 	| enum_head identifier '{'
-		{ $$ = start_enum ($2); }
+		{ $<ttype>$ = start_enum ($2); }
 	  enumlist maybecomma_warn '}' maybe_attribute
 		{ $$ = finish_enum ($<ttype>4, nreverse ($5),
 				    chainon ($1, $8)); }
 	| enum_head '{'
-		{ $$ = start_enum (NULL_TREE); }
+		{ $<ttype>$ = start_enum (NULL_TREE); }
 	  enumlist maybecomma_warn '}' maybe_attribute
 		{ $$ = finish_enum ($<ttype>3, nreverse ($4),
 				    chainon ($1, $7)); }
diff --git a/toolchain/gcc/libgloss/zpu/crt0.S b/toolchain/gcc/libgloss/zpu/crt0.S
index 35b0a8d..75c1321 100755
--- a/toolchain/gcc/libgloss/zpu/crt0.S
+++ b/toolchain/gcc/libgloss/zpu/crt0.S
@@ -818,8 +818,9 @@ _config:
 # offset 0x0000 0360
 	.balign 32,0
 _pushpc:
-	loadsp 4
-	im 1
+	loadsp 0
+	loadsp 0
+	im -1
 	add 
 	storesp 8
 	poppc
diff --git a/toolchain/gcc/newlib/libc/machine/zpu/setjmp.S b/toolchain/gcc/newlib/libc/machine/zpu/setjmp.S
index 13a3ea3..9df95f8 100755
--- a/toolchain/gcc/newlib/libc/machine/zpu/setjmp.S
+++ b/toolchain/gcc/newlib/libc/machine/zpu/setjmp.S
@@ -20,209 +20,68 @@
 
 
 setjmp:
-	; store r0. We won't be needing it, but what the heck.
-	im 0
-	load
-	loadsp 8 ; fetch argument
-	store	
-
-	; store r1
-	im 4
-	load
-	loadsp 8 ; fetch argument
-	im 4
-	add
-	store	
-
-	; store r2
-	im 8
-	load
-	loadsp 8 ; fetch argument
-	im 8
-	add
-	store	
-
-	; store r3
-	im 12
-	load
-	loadsp 8 ; fetch argument
-	im 12
-	add
-	store	
-
-	; store r4
-	im 16
-	load
-	loadsp 8 ; fetch argument
-	im 16
-	add
-	store	
-
-	; store r5
-	im 20
-	load
-	loadsp 8 ; fetch argument
-	im 20
-	add
-	store	
-
-	; store r6
-	im 24
-	load
-	loadsp 8 ; fetch argument
-	im 24
-	add
-	store	
-
-	; store r7
-	im 28
-	load
-	loadsp 8 ; fetch argument
-	im 28
-	add
-	store	
-
-	; store sp
-	pushsp
-	loadsp 8 ; fetch argument
-	im 8*4
-	add
-	store	
-
-	; store return value from this fn into setjmp buffer
-	loadsp 0
-	loadsp 8
-	im 8+8*4
-	add
-	store
-
-	; store pc
-	impcrel .Lto
-	pushpc
-	add
-	
-	loadsp 8 ; fetch argument
-	im 4+8*4
-	add
-	store
-
-	; set return value to 0
-	im 0
-	nop
-	im 0
-	store
-
-.Lto:
-	poppc
+	; jmp_buff[0] = return address
+	; jmp_buff[1] = SP of prev function
+	; jmp_buff[2] = current stack pointer
+
+			; sp+0-> return address
+			; sp+4-> 1st argument(pointer to jmp_buff)
+
+	loadsp	0
+	loadsp	8			;jmp_buff[0]
+	store				; return address
+
+	im		_memreg + 12
+	load				; SP of prev function
+	loadsp	8
+	im		4
+	add					;jmp_buff[1] address
+	store
+
+	pushsp				; current stack pointer pointer
+	loadsp	8
+	im		8
+	add					; jmp_buff[2] address
+	store				; store to jmp_buff[2]
+
+	im		0			; return value
+	nop
+	im		_memreg
+	store				; set return value
+
+	poppc
 
 
 	; arguments are buffer + return value
 longjmp:
-	; load r1
-	loadsp 4
-	im 4
-	add
-	load
-	im 4
-	store
+	; jmp_buff[0] = return address
+	; jmp_buff[1] = SP of prev function
+	; jmp_buff[2] = current stack pointer
 
-	; load r2
-	loadsp 4
-	im 8
-	add
-	load
-	im 8
-	store
-	
-	; load r3
-	loadsp 4
-	im 12
-	add
-	load
-	im 12
-	store
+			; sp+0-> return address
+			; sp+4-> 1st argument(pointer to jmp_buff)
+			; sp+8-> 2nd argument(return value for setjmp())
 
-	; load r4
-	loadsp 4
-	im 16
-	add
-	load
-	im 16
-	store
-
-	; load r5
-	loadsp 4
-	im 20
-	add
-	load
-	im 20
-	store
-
-	; load r6
-	loadsp 4
-	im 24
-	add
-	load
-	im 24
-	store
+	loadsp	8
+	im		_memreg
+	store					; set return value for setjmp()
 
-	; load r7
-	loadsp 4
-	im 28
+	loadsp	4
+	im		4
 	add
-	load
-	im 28
-	store
+	load					; saved SP of prev function
+	im		_memreg + 12
+	store					; store it
 
-	; Danger! here be dragons!
-	;
-	; Once we are on the stack from the setjmp, 
-	; remember that calling convention has destroyed
-	; the arguments to the setjmp fn.
+	loadsp	4
+	im		8
+	add						; jmp_fuf[2] address
+	load					; saved stack pointer
 
+	loadsp	8				; jmp_buf[0] address
+	load					; saved return address
+	loadsp	4				; saved stack pointer
+	store					; store return address
 
-	; copy value of r0(which is decided by the second argument
-	; to longjmp) to setjmp buffer
-	loadsp 8
-	loadsp 8
-	store
-	
-	; store pointer to setjmp buffer in r0
-	loadsp 4
-	im 0
-	store
-
-	; restore stack
-	loadsp 4
-	im 8*4
-	add
-	load
-	popsp
-	
-	; Danger! here be dragons!
-	; have now switched stacks!
-	
-	; restore return address since it has been destroyed
-	im 0
-	load
-	im 8+8*4
-	add
-	load
-	storesp 4
-	
-	; push pc onto stack
-	im 0
-	load
-	im 4+8*4
-	add
-	load
-
-	; fill in correct value in r0, which we
-	; take from the setjmp buffer....
-	im 0
-	load
-	load
-	im 0
-	store
-	
-	poppc
+	popsp					; change stack pointer
+	poppc					; return
